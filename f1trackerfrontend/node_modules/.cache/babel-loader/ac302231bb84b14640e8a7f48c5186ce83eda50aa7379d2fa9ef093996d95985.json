{"ast":null,"code":"export default class AutoExpressAPI {\n  async CheckProxy(url) {\n    return fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      const jsonString = '...'; // Your JSON data as a string\n\n      if (jsonString.trim() === \"\") {\n        console.error(\"JSON data is empty.\");\n      } else {\n        try {\n          const jsonData = JSON.parse(jsonString);\n          console.log(jsonData);\n        } catch (error) {\n          console.error('JSON parsing error:', error);\n        }\n      }\n      return response.json();\n    });\n  }\n  async api(url) {\n    return fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    });\n  }\n}\n;","map":{"version":3,"names":["AutoExpressAPI","CheckProxy","url","fetch","then","response","ok","Error","statusText","jsonString","trim","console","error","jsonData","JSON","parse","log","json","api"],"sources":["C:/Users/User/IdeaProjects/f1trackerfrontend/src/API/API.tsx"],"sourcesContent":["export default class AutoExpressAPI{\r\n    async CheckProxy(url: string){\r\n        return fetch(url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText)\r\n                }\r\n                const jsonString = '...'; // Your JSON data as a string\r\n\r\n                if (jsonString.trim() === \"\") {\r\n                    console.error(\"JSON data is empty.\");\r\n                } else {\r\n                    try {\r\n                        const jsonData = JSON.parse(jsonString);\r\n                        console.log(jsonData);\r\n                    } catch (error) {\r\n                        console.error('JSON parsing error:', error);\r\n                    }\r\n                }\r\n                return response.json()\r\n            })\r\n    }\r\n    async api<T>(url: string): Promise<T> {\r\n        return fetch(url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return response.json() as Promise<T>\r\n            })\r\n    }\r\n\r\n};"],"mappings":"AAAA,eAAe,MAAMA,cAAc;EAC/B,MAAMC,UAAUA,CAACC,GAAW,EAAC;IACzB,OAAOC,KAAK,CAACD,GAAG,CAAC,CACZE,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACxC;MACA,MAAMC,UAAU,GAAG,KAAK,CAAC,CAAC;;MAE1B,IAAIA,UAAU,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1BC,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACxC,CAAC,MAAM;QACH,IAAI;UACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;UACvCE,OAAO,CAACK,GAAG,CAACH,QAAQ,CAAC;QACzB,CAAC,CAAC,OAAOD,KAAK,EAAE;UACZD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC/C;MACJ;MACA,OAAOP,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC;EACV;EACA,MAAMC,GAAGA,CAAIhB,GAAW,EAAc;IAClC,OAAOC,KAAK,CAACD,GAAG,CAAC,CACZE,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACxC;MACA,OAAOH,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC;EACV;AAEJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}