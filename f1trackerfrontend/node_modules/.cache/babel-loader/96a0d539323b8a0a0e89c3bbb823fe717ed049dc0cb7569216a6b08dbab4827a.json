{"ast":null,"code":"export default class F1InfoAPI {\n  async Drivers() {\n    const result = fetch(\"http://localhost:8080/f1/info/drivers\").then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.MRData.DriverTable.Drivers;\n      });\n    });\n    var listtoreturn = [];\n    result.then(resultvalue => {\n      setTimeout(() => {\n        resultvalue.map(elem => {\n          listtoreturn.push({\n            value: elem.driverId,\n            label: elem.givenName + \" \" + elem.familyName\n          });\n        });\n      }, 500);\n    });\n    return listtoreturn;\n  }\n  async Rounds(year) {\n    const result = fetch(\"http://localhost:8080/f1/info/rounds?year=\" + year).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value;\n      });\n    });\n    var toreturn = 0;\n    result.then(resultvalue => {\n      setTimeout(() => {\n        toreturn = resultvalue;\n      }, 500);\n    });\n    return toreturn;\n  }\n  async Constructor(driver) {\n    const result = fetch(\"http://localhost:8080/f1/info/constructors?driver=\" + driver).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.Constructors;\n      });\n    });\n    var listtoreturn = [];\n    result.then(resultvalue => {\n      setTimeout(() => {\n        resultvalue.map(elem => {\n          listtoreturn.push({\n            value: elem.constructorId,\n            label: elem.name,\n            nation: elem.nationality\n          });\n        });\n      }, 500);\n    });\n    return listtoreturn;\n  }\n  async ConstructorByDate(year) {\n    const result = fetch(\"http://localhost:8080/f1/info/bydateconstructors?year=\" + year).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.Constructors;\n      });\n    });\n    var listtoreturn = [];\n    result.then(resultvalue => {\n      setTimeout(() => {\n        resultvalue.map(elem => {\n          listtoreturn.push({\n            value: elem.constructorId,\n            label: elem.name,\n            nation: elem.nationality\n          });\n        });\n      }, 500);\n    });\n    return listtoreturn;\n  }\n  async YearsList() {\n    var listtoreturn = [];\n    result = fetch(\"http://localhost:8080/f1/info/yearlist\").then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      response.json().then(value => {\n        listtoreturn = value;\n        console.log(listtoreturn);\n      });\n    });\n    console.log(listtoreturn);\n    return listtoreturn;\n  }\n}\n;","map":{"version":3,"names":["F1InfoAPI","Drivers","result","fetch","then","response","ok","Error","statusText","json","value","MRData","DriverTable","listtoreturn","resultvalue","setTimeout","map","elem","push","driverId","label","givenName","familyName","Rounds","year","toreturn","Constructor","driver","Constructors","constructorId","name","nation","nationality","ConstructorByDate","YearsList","console","log"],"sources":["C:/Users/User/IdeaProjects/F1TrackerServer/f1trackerfrontend/src/API/InfoAPI.tsx"],"sourcesContent":["export default class  F1InfoAPI{\r\n\r\n     async Drivers(): Promise<any[]> {\r\n        const result = fetch(\"http://localhost:8080/f1/info/drivers\").then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return response.json().then((value) => {\r\n                    return value.MRData.DriverTable.Drivers;\r\n                })\r\n            })\r\n        var listtoreturn: any[]= []\r\n        result.then((resultvalue) =>{\r\n            setTimeout(()=>{resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.driverId, label:elem.givenName + \" \" + elem.familyName})\r\n            });}, 500)\r\n        })\r\n        return listtoreturn\r\n\r\n    }\r\n\r\n    async Rounds(year: string): Promise<number>{\r\n         const result = fetch(\"http://localhost:8080/f1/info/rounds?year=\" + year).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value;\r\n            })\r\n        })\r\n        var toreturn: number = 0;\r\n        result.then((resultvalue) =>{\r\n            setTimeout(()=>{\r\n                toreturn = resultvalue\r\n            }, 500)\r\n        })\r\n        return toreturn\r\n    }\r\n\r\n    async Constructor(driver: string): Promise<any[]> {\r\n        const result = fetch(\"http://localhost:8080/f1/info/constructors?driver=\"+ driver).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value.Constructors;\r\n            })\r\n        })\r\n        var listtoreturn: any[]= []\r\n        result.then((resultvalue) =>{\r\n            setTimeout(()=>{resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.constructorId, label:elem.name , nation: elem.nationality})\r\n            });}, 500)\r\n        })\r\n        return listtoreturn\r\n\r\n    }\r\n\r\n    async ConstructorByDate(year: number): Promise<any[]> {\r\n        const result = fetch(\"http://localhost:8080/f1/info/bydateconstructors?year=\"+ year).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value.Constructors;\r\n            })\r\n        })\r\n        var listtoreturn: any[]= []\r\n        result.then((resultvalue) =>{\r\n            setTimeout(()=>{resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.constructorId, label:elem.name , nation: elem.nationality})\r\n            });}, 500)\r\n        })\r\n        return listtoreturn\r\n\r\n    }\r\n\r\n    async YearsList(): Promise<any[]>{\r\n        var listtoreturn: any[] = []\r\n         result = fetch(\"http://localhost:8080/f1/info/yearlist\").then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            response.json().then((value) => {\r\n                    listtoreturn = value\r\n                    console.log(listtoreturn)\r\n            })\r\n        })\r\n        console.log(listtoreturn)\r\n        return listtoreturn\r\n\r\n    }\r\n\r\n\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}