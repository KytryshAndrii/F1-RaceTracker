{"ast":null,"code":"export default class F1InfoAPI {\n  async Drivers() {\n    var listtoreturn = [];\n    const result = fetch(\"http://localhost:8080/f1/info/drivers\").then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.MRData.DriverTable.Drivers;\n      });\n    }).then(resultvalue => {\n      resultvalue.map(elem => {\n        listtoreturn.push({\n          value: elem.driverId,\n          label: elem.givenName + \" \" + elem.familyName\n        });\n      });\n      return listtoreturn;\n    });\n    return result;\n  }\n  async Rounds(year) {\n    var toreturn = 0;\n    const result = fetch(\"http://localhost:8080/f1/info/rounds?year=\" + year).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value;\n      });\n    }).then(resultvalue => {\n      toreturn = resultvalue;\n      return toreturn;\n    });\n    return result;\n  }\n  async Constructor(driver) {\n    var listtoreturn = [];\n    const result = fetch(\"http://localhost:8080/f1/info/constructors?driver=\" + driver).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.Constructors;\n      });\n    }).then(resultvalue => {\n      resultvalue.map(elem => {\n        listtoreturn.push({\n          value: elem.constructorId,\n          label: elem.name,\n          nation: elem.nationality\n        });\n      });\n      return listtoreturn;\n    });\n    return result;\n  }\n  async ConstructorByDate(year) {\n    var listtoreturn = [];\n    const result = fetch(\"/f1/info/bydateconstructors?year=\" + year).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.Constructors;\n      });\n    }).then(resultvalue => {\n      resultvalue.map(elem => {\n        listtoreturn.push({\n          value: elem.constructorId,\n          label: elem.name,\n          nation: elem.nationality\n        });\n      });\n      return listtoreturn;\n    });\n    return result;\n  }\n  async YearsList() {\n    var listtoreturn = [];\n    const result = fetch(\"/f1/info/yearlist\").then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    }).then(resultvalue => {\n      resultvalue.map(elem => {\n        listtoreturn.push({\n          value: elem,\n          label: elem.toString().toLocaleUpperCase()\n        });\n      });\n      return listtoreturn;\n    });\n    return result;\n  }\n  async RoundsList(year) {\n    let rounds = await this.Rounds(year);\n    var listtoreturn = [];\n    const result = fetch(\"/f1/info/roundlist?rounds=\" + rounds).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    }).then(resultvalue => {\n      resultvalue.map(elem => {\n        listtoreturn.push({\n          value: elem,\n          label: elem.toString().toLocaleUpperCase()\n        });\n      });\n      return listtoreturn;\n    });\n    return result;\n  }\n}\n;","map":{"version":3,"names":["F1InfoAPI","Drivers","listtoreturn","result","fetch","then","response","ok","Error","statusText","json","value","MRData","DriverTable","resultvalue","map","elem","push","driverId","label","givenName","familyName","Rounds","year","toreturn","Constructor","driver","Constructors","constructorId","name","nation","nationality","ConstructorByDate","YearsList","toString","toLocaleUpperCase","RoundsList","rounds"],"sources":["C:/Users/User/IdeaProjects/F1TrackerServer/f1trackerfrontend/src/API/InfoAPI.tsx"],"sourcesContent":["export default class  F1InfoAPI{\r\n\r\n     async Drivers(): Promise<any[]> {\r\n         var listtoreturn: any[]= []\r\n         const result = fetch(\"http://localhost:8080/f1/info/drivers\").then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText)\r\n                }\r\n                return response.json().then((value) => {\r\n                    return value.MRData.DriverTable.Drivers;\r\n                })\r\n            }).then((resultvalue) =>{\r\n            resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.driverId, label:elem.givenName + \" \" + elem.familyName})\r\n            });\r\n            return listtoreturn\r\n        })\r\n        return result\r\n\r\n    }\r\n\r\n    async Rounds(year: string): Promise<number>{\r\n        var toreturn: number = 0;\r\n         const result = fetch(\"http://localhost:8080/f1/info/rounds?year=\" + year).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value;\r\n            })\r\n        }).then((resultvalue) =>{\r\n                toreturn = resultvalue\r\n                return toreturn\r\n        })\r\n        return result\r\n    }\r\n\r\n    async Constructor(driver: string): Promise<any[]> {\r\n        var listtoreturn: any[]= []\r\n         const result = fetch(\"http://localhost:8080/f1/info/constructors?driver=\"+ driver).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value.Constructors;\r\n            })\r\n        }).then((resultvalue) =>{\r\n            resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.constructorId, label:elem.name , nation: elem.nationality})\r\n            });\r\n            return listtoreturn\r\n        })\r\n        return result\r\n\r\n    }\r\n\r\n    async ConstructorByDate(year: number): Promise<any[]> {\r\n        var listtoreturn: any[]= []\r\n         const result = fetch(\"/f1/info/bydateconstructors?year=\"+ year).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value.Constructors;\r\n            })\r\n        }).then((resultvalue) =>{\r\n           resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem.constructorId, label:elem.name , nation: elem.nationality})\r\n           });\r\n           return listtoreturn\r\n\r\n        })\r\n        return result\r\n\r\n    }\r\n\r\n    async YearsList(): Promise<any[]>{\r\n        var listtoreturn: any[] = []\r\n        const result = fetch(\"/f1/info/yearlist\").then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json()\r\n        }).then((resultvalue) =>{\r\n                resultvalue.map((elem: any)=> {\r\n                    listtoreturn.push({value: elem, label: elem.toString().toLocaleUpperCase()})\r\n                });\r\n                return listtoreturn\r\n        })\r\n        return result\r\n\r\n    }\r\n    async RoundsList(year: string): Promise<any[]>{\r\n        let rounds:number = await this.Rounds(year)\r\n        var listtoreturn: any[] = []\r\n        const result: Promise<any[]> = fetch(\"/f1/info/roundlist?rounds=\" + rounds).then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json()\r\n        }).then((resultvalue) =>{\r\n           resultvalue.map((elem: any)=> {\r\n                listtoreturn.push({value:elem, label:elem.toString().toLocaleUpperCase()})\r\n            });\r\n\r\n           return listtoreturn\r\n        })\r\n        return result\r\n    }\r\n\r\n\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}