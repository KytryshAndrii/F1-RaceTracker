{"ast":null,"code":"export default class ResultsAPI {\n  async Recent() {\n    const result = fetch(\"http://ergast.com/api/f1/current/last/results.json\").then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json().then(value => {\n        return value.MRData.RaceTable.Races[0];\n      });\n    });\n    var listtoreturn = [];\n    var season = \"\";\n    var location = \"\";\n    var date = \"\";\n    var time = \"\";\n    result.then(resultvalue => {\n      season = resultvalue.season;\n      console.log(resultvalue);\n      location = resultvalue.Circuit.Location.locality + \" \" + resultvalue.Circuit.Location.country;\n      date = resultvalue.date;\n      time = resultvalue.time;\n      setTimeout(() => {\n        resultvalue.Results.map(elem => {\n          if (elem.FastestLap && elem.Constructor.laps) {\n            listtoreturn.push({\n              number: elem.number,\n              position: elem.position,\n              points: elem.points,\n              driver: elem.Driver.givenName + \" \" + elem.Driver.familyName,\n              constructor: elem.Constructor.name,\n              laps: elem.Constructor.laps,\n              status: elem.status,\n              fastesttime: elem.FastestLap.Time.time,\n              averspeed: elem.FastestLap.AverageSpeed.speed\n            });\n          } else {\n            listtoreturn.push({\n              number: elem.number,\n              position: elem.position,\n              points: elem.points,\n              driver: elem.Driver.givenName + \" \" + elem.Driver.familyName,\n              constructor: elem.Constructor.name,\n              status: elem.status\n            });\n          }\n        })\n        //listtoreturn.push({season: season, location: location, date: date, time: time})\n        ;\n      }, 500);\n    });\n    return listtoreturn;\n  }\n}\n;","map":{"version":3,"names":["ResultsAPI","Recent","result","fetch","then","response","ok","Error","statusText","json","value","MRData","RaceTable","Races","listtoreturn","season","location","date","time","resultvalue","console","log","Circuit","Location","locality","country","setTimeout","Results","map","elem","FastestLap","Constructor","laps","push","number","position","points","driver","Driver","givenName","familyName","constructor","name","status","fastesttime","Time","averspeed","AverageSpeed","speed"],"sources":["C:/Users/User/IdeaProjects/F1TrackerServer/f1trackerfrontend/src/API/ResultsAPI.tsx"],"sourcesContent":["export default class  ResultsAPI{\r\n    async Recent(): Promise<any[]> {\r\n        const result = fetch(\"http://ergast.com/api/f1/current/last/results.json\").then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText)\r\n            }\r\n            return response.json().then((value) => {\r\n                return value.MRData.RaceTable.Races[0];\r\n            })\r\n        })\r\n        var listtoreturn: any[]= []\r\n        var season: string = \"\"\r\n        var location: string = \"\"\r\n        var date: string = \"\"\r\n        var time: string = \"\"\r\n        result.then((resultvalue) =>{\r\n            season = resultvalue.season\r\n            console.log(resultvalue)\r\n            location = resultvalue.Circuit.Location.locality + \" \" + resultvalue.Circuit.Location.country\r\n            date = resultvalue.date\r\n            time = resultvalue.time\r\n            setTimeout(()=>{resultvalue.Results.map((elem: any)=> {\r\n                if(elem.FastestLap && elem.Constructor.laps){\r\n                    listtoreturn.push(\r\n                        {number: elem.number, position: elem.position, points: elem.points,\r\n                         driver: elem.Driver.givenName + \" \" + elem.Driver.familyName, constructor: elem.Constructor.name,\r\n                         laps: elem.Constructor.laps, status: elem.status,\r\n                         fastesttime: elem.FastestLap.Time.time, averspeed: elem.FastestLap.AverageSpeed.speed\r\n                        })\r\n                }else{\r\n                    listtoreturn.push(\r\n                        {number: elem.number, position: elem.position, points: elem.points,\r\n                         driver: elem.Driver.givenName + \" \" + elem.Driver.familyName, constructor: elem.Constructor.name,\r\n                         status: elem.status,\r\n                        })\r\n                }\r\n            })\r\n                //listtoreturn.push({season: season, location: location, date: date, time: time})\r\n            ;}, 500)\r\n        })\r\n        return listtoreturn\r\n\r\n    }\r\n};"],"mappings":"AAAA,eAAe,MAAOA,UAAU;EAC5B,MAAMC,MAAMA,CAAA,EAAmB;IAC3B,MAAMC,MAAM,GAAGC,KAAK,CAAC,oDAAoD,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;MACxF,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,UAAU,CAAC;MACxC;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACL,IAAI,CAAEM,KAAK,IAAK;QACnC,OAAOA,KAAK,CAACC,MAAM,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC;IACN,CAAC,CAAC;IACF,IAAIC,YAAmB,GAAE,EAAE;IAC3B,IAAIC,MAAc,GAAG,EAAE;IACvB,IAAIC,QAAgB,GAAG,EAAE;IACzB,IAAIC,IAAY,GAAG,EAAE;IACrB,IAAIC,IAAY,GAAG,EAAE;IACrBhB,MAAM,CAACE,IAAI,CAAEe,WAAW,IAAI;MACxBJ,MAAM,GAAGI,WAAW,CAACJ,MAAM;MAC3BK,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;MACxBH,QAAQ,GAAGG,WAAW,CAACG,OAAO,CAACC,QAAQ,CAACC,QAAQ,GAAG,GAAG,GAAGL,WAAW,CAACG,OAAO,CAACC,QAAQ,CAACE,OAAO;MAC7FR,IAAI,GAAGE,WAAW,CAACF,IAAI;MACvBC,IAAI,GAAGC,WAAW,CAACD,IAAI;MACvBQ,UAAU,CAAC,MAAI;QAACP,WAAW,CAACQ,OAAO,CAACC,GAAG,CAAEC,IAAS,IAAI;UAClD,IAAGA,IAAI,CAACC,UAAU,IAAID,IAAI,CAACE,WAAW,CAACC,IAAI,EAAC;YACxClB,YAAY,CAACmB,IAAI,CACb;cAACC,MAAM,EAAEL,IAAI,CAACK,MAAM;cAAEC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;cAAEC,MAAM,EAAEP,IAAI,CAACO,MAAM;cACjEC,MAAM,EAAER,IAAI,CAACS,MAAM,CAACC,SAAS,GAAG,GAAG,GAAGV,IAAI,CAACS,MAAM,CAACE,UAAU;cAAEC,WAAW,EAAEZ,IAAI,CAACE,WAAW,CAACW,IAAI;cAChGV,IAAI,EAAEH,IAAI,CAACE,WAAW,CAACC,IAAI;cAAEW,MAAM,EAAEd,IAAI,CAACc,MAAM;cAChDC,WAAW,EAAEf,IAAI,CAACC,UAAU,CAACe,IAAI,CAAC3B,IAAI;cAAE4B,SAAS,EAAEjB,IAAI,CAACC,UAAU,CAACiB,YAAY,CAACC;YACjF,CAAC,CAAC;UACV,CAAC,MAAI;YACDlC,YAAY,CAACmB,IAAI,CACb;cAACC,MAAM,EAAEL,IAAI,CAACK,MAAM;cAAEC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;cAAEC,MAAM,EAAEP,IAAI,CAACO,MAAM;cACjEC,MAAM,EAAER,IAAI,CAACS,MAAM,CAACC,SAAS,GAAG,GAAG,GAAGV,IAAI,CAACS,MAAM,CAACE,UAAU;cAAEC,WAAW,EAAEZ,IAAI,CAACE,WAAW,CAACW,IAAI;cAChGC,MAAM,EAAEd,IAAI,CAACc;YACd,CAAC,CAAC;UACV;QACJ,CAAC;QACG;QAAA;MACH,CAAC,EAAE,GAAG,CAAC;IACZ,CAAC,CAAC;IACF,OAAO7B,YAAY;EAEvB;AACJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}